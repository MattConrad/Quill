<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ink-engine-runtime</name>
    </assembly>
    <members>
        <member name="T:Ink.Runtime.Choice">
            <summary>
            A generated Choice from the story.
            A single ChoicePoint in the Story could potentially generate
            different Choices dynamically dependent on state, so they're
            separated.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Choice.text">
            <summary>
            The main text to presented to the player for this Choice.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Choice.pathStringOnChoice">
            <summary>
            The target path that the Story should be diverted to if
            this Choice is chosen.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Choice.index">
            <summary>
            The original index into currentChoices list on the Story when
            this Choice was generated, for convenience.
            </summary>
        </member>
        <member name="T:Ink.Runtime.ChoicePoint">
            <summary>
            The ChoicePoint represents the point within the Story where
            a Choice instance gets generated. The distinction is made
            because the text of the Choice can be dynamically generated.
            </summary>
        </member>
        <member name="T:Ink.Runtime.Object">
            <summary>
            Base class for all ink runtime content.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Object.parent">
            <summary>
            Runtime.Objects can be included in the main Story as a hierarchy.
            Usually parents are Container objects. (TODO: Always?)
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Ink.Runtime.Object.op_Implicit(Ink.Runtime.Object)~System.Boolean">
            Allow implicit conversion to bool so you don't have to do:
            if( myObj != null ) ...
        </member>
        <member name="M:Ink.Runtime.Object.op_Equality(Ink.Runtime.Object,Ink.Runtime.Object)">
            Required for implicit bool comparison
        </member>
        <member name="M:Ink.Runtime.Object.op_Inequality(Ink.Runtime.Object,Ink.Runtime.Object)">
            Required for implicit bool comparison
        </member>
        <member name="M:Ink.Runtime.Object.Equals(System.Object)">
            Required for implicit bool comparison
        </member>
        <member name="M:Ink.Runtime.Object.GetHashCode">
            Required for implicit bool comparison
        </member>
        <member name="T:Ink.Runtime.Story">
            <summary>
            A Story is the core class that represents a complete Ink narrative, and
            manages the evaluation and state of it.
            </summary>
        </member>
        <member name="F:Ink.Runtime.Story.inkVersionCurrent">
            <summary>
            The current version of the ink story file format.
            </summary>
        </member>
        <member name="F:Ink.Runtime.Story.inkVersionMinimumCompatible">
            <summary>
            The minimum legacy version of ink that can be loaded by the current version of the code.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.currentChoices">
            <summary>
            The list of Choice objects available at the current point in
            the Story. This list will be populated as the Story is stepped
            through with the Continue() method. Once canContinue becomes
            false, this list will be fully populated, and is usually
            (but not always) on the final Continue() step.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.currentText">
            <summary>
            The latest line of text to be generated from a Continue() call.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.currentErrors">
            <summary>
            Any errors generated during evaluation of the Story.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.hasError">
            <summary>
            Whether the currentErrors list contains any errors.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.variablesState">
            <summary>
            The VariablesState object contains all the global variables in the story.
            However, note that there's more to the state of a Story than just the
            global variables. This is a convenience accessor to the full state object.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.state">
            <summary>
            The entire current state of the story including (but not limited to):
            
             * Global variables
             * Temporary variables
             * Read/visit and turn counts
             * The callstack and evaluation stacks
             * The current threads
            
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.#ctor(System.String)">
            <summary>
            Construct a Story object using a JSON string compiled through inklecate.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.ToJsonString(System.Boolean)">
            <summary>
            The Story itself in JSON representation.
            </summary>
            <param name="indented">
            Whether to indent or 'pretty print' the JSON. Not avisable, except
            for debugging purposes of small stories.</param>
        </member>
        <member name="M:Ink.Runtime.Story.ResetState">
            <summary>
            Reset the Story back to its initial state as it was when it was
            first constructed.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.ResetErrors">
            <summary>
            Reset the runtime error list within the state.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.ResetCallstack">
            <summary>
            Unwinds the callstack. Useful to reset the Story's evaluation
            without actually changing any meaningful state, for example if
            you want to exit a section of story prematurely and tell it to
            go elsewhere with a call to ChoosePathString(...).
            Doing so without calling ResetCallstack() could cause unexpected
            issues if, for example, the Story was in a tunnel already.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.Continue">
            <summary>
            Continue the story for one line of content, if possible.
            If you're not sure if there's more content available, for example if you
            want to check whether you're at a choice point or at the end of the story,
            you should call <c>canContinue</c> before calling this function.
            </summary>
            <returns>The line of text content.</returns>
        </member>
        <member name="P:Ink.Runtime.Story.canContinue">
            <summary>
            Check whether more content is available if you were to call <c>Continue()</c> - i.e.
            are we mid story rather than at a choice point or at the end.
            </summary>
            <value><c>true</c> if it's possible to call <c>Continue()</c>.</value>
        </member>
        <member name="M:Ink.Runtime.Story.ContinueMaximally">
            <summary>
            Continue the story until the next choice point or until it runs out of content.
            This is as opposed to the Continue() method which only evaluates one line of
            output at a time.
            </summary>
            <returns>The resulting text evaluated by the ink engine, concatenated together.</returns>
        </member>
        <member name="M:Ink.Runtime.Story.PerformLogicAndFlowControl(Ink.Runtime.Object)">
            <summary>
            Checks whether contentObj is a control or flow object rather than a piece of content, 
            and performs the required command if necessary.
            </summary>
            <returns><c>true</c> if object was logic or flow control, <c>false</c> if it's normal content.</returns>
            <param name="contentObj">Content object.</param>
        </member>
        <member name="M:Ink.Runtime.Story.ChoosePathString(System.String)">
            <summary>
            Change the current position of the story to the given path.
            From here you can call Continue() to evaluate the next line.
            The path string is a dot-separated path as used internally by the engine.
            These examples should work:
            
               myKnot
               myKnot.myStitch
            
            Note however that this won't necessarily work:
            
               myKnot.myStitch.myLabelledChoice
            
            ...because of the way that content is nested within a weave structure.
            
            </summary>
            <param name="path">A dot-separted path string, as specified above.</param>
        </member>
        <member name="M:Ink.Runtime.Story.ChooseChoiceIndex(System.Int32)">
            <summary>
            Chooses the Choice from the currentChoices list with the given
            index. Internally, this sets the current content path to that
            pointed to by the Choice, ready to continue story evaluation.
            </summary>
        </member>
        <member name="P:Ink.Runtime.Story.allowExternalFunctionFallbacks">
            <summary>
            An ink file can provide a fallback functions for when when an EXTERNAL has been left
            unbound by the client, and the fallback function will be called instead. Useful when
            testing a story in playmode, when it's not possible to write a client-side C# external
            function, but you don't want it to fail to run.
            </summary>
        </member>
        <member name="T:Ink.Runtime.Story.ExternalFunction">
            <summary>
            General purpose delegate definition for bound EXTERNAL function definitions
            from ink. Note that this version isn't necessary if you have a function
            with three arguments or less - see the overloads of BindExternalFunction.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunctionGeneral(System.String,Ink.Runtime.Story.ExternalFunction)">
            <summary>
            Most general form of function binding that returns an object
            and takes an array of object parameters.
            The only way to bind a function with more than 3 arguments.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="func">The C# function to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction(System.String,System.Func{System.Object})">
            <summary>
            Bind a C# function to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="func">The C# function to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction(System.String,System.Action)">
            <summary>
            Bind a C# Action to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="act">The C# action to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction``1(System.String,System.Func{``0,System.Object})">
            <summary>
            Bind a C# function to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="func">The C# function to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction``1(System.String,System.Action{``0})">
            <summary>
            Bind a C# action to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="act">The C# action to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction``2(System.String,System.Func{``0,``1,System.Object})">
            <summary>
            Bind a C# function to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="func">The C# function to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction``2(System.String,System.Action{``0,``1})">
            <summary>
            Bind a C# action to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="act">The C# action to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction``3(System.String,System.Func{``0,``1,``2,System.Object})">
            <summary>
            Bind a C# function to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="func">The C# function to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BindExternalFunction``3(System.String,System.Action{``0,``1,``2})">
            <summary>
            Bind a C# action to an ink EXTERNAL function declaration.
            </summary>
            <param name="funcName">EXTERNAL ink function name to bind to.</param>
            <param name="act">The C# action to bind.</param>
        </member>
        <member name="M:Ink.Runtime.Story.UnbindExternalFunction(System.String)">
            <summary>
            Remove a binding for a named EXTERNAL ink function.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.ValidateExternalBindings">
            <summary>
            Check that all EXTERNAL ink functions have a valid bound C# function.
            Note that this is automatically called on the first call to Continue().
            </summary>
        </member>
        <member name="T:Ink.Runtime.Story.VariableObserver">
            <summary>
            Delegate definition for variable observation - see ObserveVariable.
            </summary>
        </member>
        <member name="M:Ink.Runtime.Story.ObserveVariable(System.String,Ink.Runtime.Story.VariableObserver)">
            <summary>
            When the named global variable changes it's value, the observer will be
            called to notify it of the change. Note that if the value changes multiple
            times within the ink, the observer will only be called once, at the end
            of the ink's evaluation. If, during the evaluation, it changes and then
            changes back again to its original value, it will still be called.
            Note that the observer will also be fired if the value of the variable
            is changed externally to the ink, by directly setting a value in
            story.variablesState.
            </summary>
            <param name="variableName">The name of the global variable to observe.</param>
            <param name="observer">A delegate function to call when the variable changes.</param>
        </member>
        <member name="M:Ink.Runtime.Story.ObserveVariables(System.Collections.Generic.IList{System.String},Ink.Runtime.Story.VariableObserver)">
            <summary>
            Convenience function to allow multiple variables to be observed with the same
            observer delegate function. See the singular ObserveVariable for details.
            The observer will get one call for every variable that has changed.
            </summary>
            <param name="variableNames">The set of variables to observe.</param>
            <param name="observer">The delegate function to call when any of the named variables change.</param>
        </member>
        <member name="M:Ink.Runtime.Story.RemoveVariableObserver(Ink.Runtime.Story.VariableObserver,System.String)">
            <summary>
            Removes the variable observer, to stop getting variable change notifications.
            If you pass a specific variable name, it will stop observing that particular one. If you
            pass null (or leave it blank, since it's optional), then the observer will be removed
            from all variables that it's subscribed to.
            </summary>
            <param name="observer">The observer to stop observing.</param>
            <param name="specificVariableName">(Optional) Specific variable name to stop observing.</param>
        </member>
        <member name="M:Ink.Runtime.Story.BuildStringOfHierarchy">
            <summary>
            Useful when debugging a (very short) story, to visualise the state of the
            story. Add this call as a watch and open the extended text. A left-arrow mark
            will denote the current point of the story.
            It's only recommended that this is used on very short debug stories, since
            it can end up generate a large quantity of text otherwise.
            </summary>
        </member>
        <member name="T:Ink.Runtime.StoryException">
            <summary>
            Exception that represents an error when running a Story at runtime.
            An exception being thrown of this type is typically when there's
            a bug in your ink, rather than in the ink engine itself!
            </summary>
        </member>
        <member name="M:Ink.Runtime.StoryException.#ctor">
            <summary>
            Constructs a default instance of a StoryException without a message.
            </summary>
        </member>
        <member name="M:Ink.Runtime.StoryException.#ctor(System.String)">
            <summary>
            Constructs an instance of a StoryException with a message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Ink.Runtime.StoryState">
            <summary>
            All story state information is included in the StoryState class,
            including global variables, read counts, the pointer to the current
            point in the story, the call stack (for tunnels, functions, etc),
            and a few other smaller bits and pieces. You can save the current
            state using the json serialisation functions ToJson and LoadJson.
            </summary>
        </member>
        <member name="F:Ink.Runtime.StoryState.kInkSaveStateVersion">
            <summary>
            The current version of the state save file JSON-based format.
            </summary>
        </member>
        <member name="M:Ink.Runtime.StoryState.ToJson(System.Boolean)">
            <summary>
            Exports the current state to json format, in order to save the game.
            </summary>
            <returns>The save state in json format.</returns>
            <param name="indented">Whether to 'pretty print' using whitespace.</param>
        </member>
        <member name="M:Ink.Runtime.StoryState.LoadJson(System.String)">
            <summary>
            Loads a previously saved state in JSON format.
            </summary>
            <param name="json">The JSON string to load.</param>
        </member>
        <member name="M:Ink.Runtime.StoryState.VisitCountAtPathString(System.String)">
            <summary>
            Gets the visit/read count of a particular Container at the given path.
            For a knot or stitch, that path string will be in the form:
            
                knot
                knot.stitch
            
            </summary>
            <returns>The number of times the specific knot or stitch has
            been enountered by the ink engine.</returns>
            <param name="pathString">The dot-separated path string of
            the specific knot or stitch.</param>
        </member>
        <member name="P:Ink.Runtime.StoryState.jsonToken">
            <summary>
            Object representation of full JSON state. Usually you should use
            LoadJson and ToJson since they serialise directly to string for you.
            But, if your game uses Json.Net itself, it may be useful to get
            the JToken so that you can integrate it into your own save format.
            </summary>
        </member>
        <member name="T:Ink.Runtime.VariablesState">
            <summary>
            Encompasses all the global variables in an ink Story, and
            allows binding of a VariableChanged event so that that game
            code can be notified whenever the global variables change.
            </summary>
        </member>
        <member name="P:Ink.Runtime.VariablesState.Item(System.String)">
            <summary>
            Get or set the value of a named global ink variable.
            The types available are the standard ink types. Certain
            types will be implicitly casted when setting.
            For example, doubles to floats, longs to ints, and bools
            to ints.
            </summary>
        </member>
        <member name="M:Ink.Runtime.VariablesState.GetEnumerator">
            <summary>
            Enumerator to allow iteration over all global variables by name.
            </summary>
        </member>
    </members>
</doc>
